{"ast":null,"code":"import React,{useEffect}from'react';import{useDispatch,useSelector}from'react-redux';import{Post}from'../Post/Post';import{getSubredditPosts}from'../../api/reddit';// Import the API function\nimport'./Home.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const Home=()=>{const dispatch=useDispatch();const posts=useSelector(state=>state.posts_red.posts);// Assuming you have a posts slice in your Redux store\n//const com = useSelector(state => state.posts_red.comments)\nconst subreddit=useSelector(state=>state.subreddit_red.subreddit);const searchTerm=useSelector(state=>state.searchterm_red.searchTerm);useEffect(()=>{// Fetch subreddit posts when the component mounts\nconst fetchPosts=async()=>{try{const subredditPosts=await getSubredditPosts(subreddit);// Dispatch an action to store the fetched posts in Redux\ndispatch({type:'FETCH_POSTS_SUCCESS',payload:subredditPosts});}catch(error){console.error('Error fetching subreddit posts:',error);// Dispatch an action to handle the error\ndispatch({type:'FETCH_POSTS_FAILURE',payload:error.message});}};fetchPosts();// Call the fetchdPosts function\n},[dispatch,subreddit]);// Include dispatch in the dependency array to prevent useEffect from running infinitely\nconst filteredPosts=posts.filter(post=>post.title.toLowerCase().includes(searchTerm.toLowerCase()));return/*#__PURE__*/_jsxs(\"div\",{className:\"home\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Reddit Posts\"}),/*#__PURE__*/_jsx(\"ul\",{children:filteredPosts.map(post=>/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(Post,{post:post})},post.id))})]});};","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Post","getSubredditPosts","jsx","_jsx","jsxs","_jsxs","Home","dispatch","posts","state","posts_red","subreddit","subreddit_red","searchTerm","searchterm_red","fetchPosts","subredditPosts","type","payload","error","console","message","filteredPosts","filter","post","title","toLowerCase","includes","className","children","map","id"],"sources":["/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/reddit_pp_4/src/features/Home/Home.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts} from '../../api/reddit'; // Import the API function\nimport './Home.css';\n\n\n\nexport const Home = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts_red.posts); // Assuming you have a posts slice in your Redux store\n  //const com = useSelector(state => state.posts_red.comments)\n  const subreddit = useSelector(state => state.subreddit_red.subreddit)\n  const searchTerm = useSelector(state => state.searchterm_red.searchTerm);\n\n  useEffect(() => {\n    // Fetch subreddit posts when the component mounts\n    const fetchPosts = async () => {\n      try {\n\n        const subredditPosts = await getSubredditPosts(subreddit);\n        // Dispatch an action to store the fetched posts in Redux\n        dispatch({ type: 'FETCH_POSTS_SUCCESS', payload: subredditPosts });\n      } catch (error) {\n        console.error('Error fetching subreddit posts:', error);\n        // Dispatch an action to handle the error\n        dispatch({ type: 'FETCH_POSTS_FAILURE', payload: error.message });\n      }\n    };\n\n    fetchPosts(); // Call the fetchdPosts function\n  }, [dispatch, subreddit]); // Include dispatch in the dependency array to prevent useEffect from running infinitely\n\n  const filteredPosts = posts.filter(post =>\n    post.title.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n\n\n  return (\n    <div className=\"home\">\n      <h1>Reddit Posts</h1>\n      <ul>\n        {filteredPosts.map(post => (\n          <li key={post.id}>\n            <Post post={post} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,IAAI,KAAQ,cAAc,CACnC,OAASC,iBAAiB,KAAO,kBAAkB,CAAE;AACrD,MAAO,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAIpB,MAAO,MAAM,CAAAC,IAAI,CAAGA,CAAA,GAAM,CACxB,KAAM,CAAAC,QAAQ,CAAGT,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAU,KAAK,CAAGT,WAAW,CAACU,KAAK,EAAIA,KAAK,CAACC,SAAS,CAACF,KAAK,CAAC,CAAE;AAC3D;AACA,KAAM,CAAAG,SAAS,CAAGZ,WAAW,CAACU,KAAK,EAAIA,KAAK,CAACG,aAAa,CAACD,SAAS,CAAC,CACrE,KAAM,CAAAE,UAAU,CAAGd,WAAW,CAACU,KAAK,EAAIA,KAAK,CAACK,cAAc,CAACD,UAAU,CAAC,CAExEhB,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAkB,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAI,CAEF,KAAM,CAAAC,cAAc,CAAG,KAAM,CAAAf,iBAAiB,CAACU,SAAS,CAAC,CACzD;AACAJ,QAAQ,CAAC,CAAEU,IAAI,CAAE,qBAAqB,CAAEC,OAAO,CAAEF,cAAe,CAAC,CAAC,CACpE,CAAE,MAAOG,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACvD;AACAZ,QAAQ,CAAC,CAAEU,IAAI,CAAE,qBAAqB,CAAEC,OAAO,CAAEC,KAAK,CAACE,OAAQ,CAAC,CAAC,CACnE,CACF,CAAC,CAEDN,UAAU,CAAC,CAAC,CAAE;AAChB,CAAC,CAAE,CAACR,QAAQ,CAAEI,SAAS,CAAC,CAAC,CAAE;AAE3B,KAAM,CAAAW,aAAa,CAAGd,KAAK,CAACe,MAAM,CAACC,IAAI,EACrCA,IAAI,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACd,UAAU,CAACa,WAAW,CAAC,CAAC,CAC5D,CAAC,CAID,mBACErB,KAAA,QAAKuB,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnB1B,IAAA,OAAA0B,QAAA,CAAI,cAAY,CAAI,CAAC,cACrB1B,IAAA,OAAA0B,QAAA,CACGP,aAAa,CAACQ,GAAG,CAACN,IAAI,eACrBrB,IAAA,OAAA0B,QAAA,cACE1B,IAAA,CAACH,IAAI,EAACwB,IAAI,CAAEA,IAAK,CAAE,CAAC,EADbA,IAAI,CAACO,EAEV,CACL,CAAC,CACA,CAAC,EACF,CAAC,CAEV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}