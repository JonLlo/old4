{"ast":null,"code":"import'./Post.css';import{API_ROOT}from'../../api/reddit';import React,{useState,useEffect}from'react';import Card from'../../components/Card/Card';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Comment=_ref=>{let{comment}=_ref;return/*#__PURE__*/_jsx(Card,{className:\"comment\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:comment.author}),/*#__PURE__*/_jsx(\"p\",{children:comment.body})]})});};export const Post=_ref2=>{let{post}=_ref2;const[showComments,setShowComments]=useState(false);const[comments,setComments]=useState([]);useEffect(()=>{const fetchComments=async()=>{const response=await fetch(\"https://www.reddit.com\".concat(post.permalink,\".json\"));const redditData=await response.json();setComments(redditData[1].data.children.map(comment=>comment.data));};if(showComments){fetchComments();}},[showComments,post.permalink]);const toggleComments=()=>{setShowComments(!showComments);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Card,{className:\"card\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:post.title}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Author: \",post.author]}),/*#__PURE__*/_jsx(\"p\",{children:post.body}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Number of Comments: \",post.num_comments]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"img\",{src:post.url,alt:\"\",className:\"post-image\"})}),/*#__PURE__*/_jsx(\"button\",{onClick:toggleComments,children:showComments?'Hide Comments':'Show Comments'})]})}),showComments&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Comments\"}),comments.map(comment=>/*#__PURE__*/_jsx(Comment,{comment:comment},comment.id))]})]});};","map":{"version":3,"names":["API_ROOT","React","useState","useEffect","Card","jsx","_jsx","jsxs","_jsxs","Comment","_ref","comment","className","children","author","body","Post","_ref2","post","showComments","setShowComments","comments","setComments","fetchComments","response","fetch","concat","permalink","redditData","json","data","map","toggleComments","title","num_comments","src","url","alt","onClick","id"],"sources":["/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Post/Post.js"],"sourcesContent":["import './Post.css';\nimport { API_ROOT } from '../../api/reddit';\nimport React, { useState, useEffect } from 'react';\nimport Card from '../../components/Card/Card';\n\nconst Comment = ({ comment }) => {\n  return (\n    <Card className=\"comment\">\n      <div>\n        <p>{comment.author}</p>\n        <p>{comment.body}</p>\n      </div>\n    </Card>\n  );\n};\n\nexport const Post = ({ post }) => {\n  const [showComments, setShowComments] = useState(false);\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    const fetchComments = async () => {\n      const response = await fetch(`https://www.reddit.com${post.permalink}.json`);\n      const redditData = await response.json();\n      setComments(redditData[1].data.children.map(comment => comment.data));\n    };\n\n    if (showComments) {\n      fetchComments();\n    }\n  }, [showComments, post.permalink]);\n\n  const toggleComments = () => {\n    setShowComments(!showComments);\n  };\n\n  return (\n    <div>\n      <Card className=\"card\">\n        <div>\n          <h2>{post.title}</h2>\n          <p>Author: {post.author}</p>\n          <p>{post.body}</p>\n          <p>Number of Comments: {post.num_comments}</p>\n          <div>\n              <img src={post.url} alt=\"\" className=\"post-image\" />\n            </div>\n          <button onClick={toggleComments}>\n            {showComments ? 'Hide Comments' : 'Show Comments'}\n          </button>\n        </div>\n      </Card>\n\n      {showComments && (\n        <div>\n          <h3>Comments</h3>\n          {comments.map(comment => (\n            <Comment key={comment.id} comment={comment} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}