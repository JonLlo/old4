{"ast":null,"code":"var _jsxFileName = \"/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Home/Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts } from '../../api/reddit';\nimport './Home.css';\nimport { Header } from '../Header/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts_red.posts);\n  const subreddit = useSelector(state => state.subreddit_red.subreddit);\n  const searchQuery = useSelector(state => state.header.searchQuery); // Assuming you store searchQuery in a separate slice\n\n  const handleSearch = searchValue => {\n    // Dispatch an action to store the search query\n    // You can define an action creator and dispatch it here\n    console.log('Search value:', searchValue);\n  };\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const subredditPosts = await getSubredditPosts(subreddit);\n        dispatch({\n          type: 'FETCH_POSTS_SUCCESS',\n          payload: subredditPosts\n        });\n      } catch (error) {\n        console.error('Error fetching subreddit posts:', error);\n        dispatch({\n          type: 'FETCH_POSTS_FAILURE',\n          payload: error.message\n        });\n      }\n    };\n    fetchPosts();\n  }, [dispatch, subreddit]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reddit Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          post: post,\n          searchQuery: searchQuery\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"F6KLaCVFJSbP3eu5Wc2QY2rfxCI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Post","getSubredditPosts","Header","jsxDEV","_jsxDEV","Home","_s","dispatch","posts","state","posts_red","subreddit","subreddit_red","searchQuery","header","handleSearch","searchValue","console","log","fetchPosts","subredditPosts","type","payload","error","message","className","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","map","post","_c","$RefreshReg$"],"sources":["/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Home/Home.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts } from '../../api/reddit';\nimport './Home.css';\nimport { Header } from '../Header/Header';\n\nexport const Home = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts_red.posts);\n  const subreddit = useSelector(state => state.subreddit_red.subreddit);\n  const searchQuery = useSelector(state => state.header.searchQuery); // Assuming you store searchQuery in a separate slice\n\n  const handleSearch = (searchValue) => {\n    // Dispatch an action to store the search query\n    // You can define an action creator and dispatch it here\n    console.log('Search value:', searchValue);\n  };\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const subredditPosts = await getSubredditPosts(subreddit);\n        dispatch({ type: 'FETCH_POSTS_SUCCESS', payload: subredditPosts });\n      } catch (error) {\n        console.error('Error fetching subreddit posts:', error);\n        dispatch({ type: 'FETCH_POSTS_FAILURE', payload: error.message });\n      }\n    };\n\n    fetchPosts();\n  }, [dispatch, subreddit]);\n\n  return (\n    <div className=\"home\">\n      <Header onSearch={handleSearch} />\n      <h1>Reddit Posts</h1>\n      <ul>\n        {posts.map(post => (\n          <li>\n            <Post post={post} searchQuery={searchQuery} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,iBAAiB,QAAQ,kBAAkB;AACpD,OAAO,YAAY;AACnB,SAASC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,KAAK,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,SAAS,CAACF,KAAK,CAAC;EACzD,MAAMG,SAAS,GAAGZ,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACG,aAAa,CAACD,SAAS,CAAC;EACrE,MAAME,WAAW,GAAGd,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACK,MAAM,CAACD,WAAW,CAAC,CAAC,CAAC;;EAEpE,MAAME,YAAY,GAAIC,WAAW,IAAK;IACpC;IACA;IACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,WAAW,CAAC;EAC3C,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACd,MAAMsB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,cAAc,GAAG,MAAMnB,iBAAiB,CAACU,SAAS,CAAC;QACzDJ,QAAQ,CAAC;UAAEc,IAAI,EAAE,qBAAqB;UAAEC,OAAO,EAAEF;QAAe,CAAC,CAAC;MACpE,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvDhB,QAAQ,CAAC;UAAEc,IAAI,EAAE,qBAAqB;UAAEC,OAAO,EAAEC,KAAK,CAACC;QAAQ,CAAC,CAAC;MACnE;IACF,CAAC;IAEDL,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACZ,QAAQ,EAAEI,SAAS,CAAC,CAAC;EAEzB,oBACEP,OAAA;IAAKqB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBtB,OAAA,CAACF,MAAM;MAACyB,QAAQ,EAAEZ;IAAa;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClC3B,OAAA;MAAAsB,QAAA,EAAI;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrB3B,OAAA;MAAAsB,QAAA,EACGlB,KAAK,CAACwB,GAAG,CAACC,IAAI,iBACb7B,OAAA;QAAAsB,QAAA,eACEtB,OAAA,CAACJ,IAAI;UAACiC,IAAI,EAAEA,IAAK;UAACpB,WAAW,EAAEA;QAAY;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACzB,EAAA,CAvCWD,IAAI;EAAA,QACEP,WAAW,EACdC,WAAW,EACPA,WAAW,EACTA,WAAW;AAAA;AAAAmC,EAAA,GAJpB7B,IAAI;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}