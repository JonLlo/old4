{"ast":null,"code":"var _jsxFileName = \"/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Home/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts } from '../../api/reddit'; // Import the API function\nimport './Home.css';\nimport { Sidebar } from '../Sidebar/Sidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts_red.posts); // Assuming you have a posts slice in your Redux store\n  const com = useSelector(state => state.posts_red.comments);\n  const [currentSubreddit, setCurrentSubreddit] = useState('FantasyPL');\n  const location = useLocation();\n  useEffect(() => {\n    // Extract the subreddit from the URL path\n    const pathname = location.pathname;\n    const subreddit = pathname.split('/')[2]; // Extract the subreddit from the URL path\n    setCurrentSubreddit(subreddit);\n  }, [location]);\n  useEffect(() => {\n    // Fetch subreddit posts when the component mounts\n    const fetchPosts = async subreddit => {\n      try {\n        //const subreddit = '/r/FantasyPL'; // Example subreddit (replace with your desired subreddit)\n        const subredditPosts = await getSubredditPosts(subreddit);\n        // Dispatch an action to store the fetched posts in Redux\n        dispatch({\n          type: 'FETCH_POSTS_SUCCESS',\n          payload: subredditPosts\n        });\n      } catch (error) {\n        console.error('Error fetching subreddit posts:', error);\n        // Dispatch an action to handle the error\n        dispatch({\n          type: 'FETCH_POSTS_FAILURE',\n          payload: error.message\n        });\n      }\n    };\n    fetchPosts(currentSubreddit); // Call the fetchPosts function\n  }, [dispatch]); // Include dispatch in the dependency array to prevent useEffect from running infinitely\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reddit Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"MerOIwKuvuppPuqys/Ffues+wwc=\", true, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Post","getSubredditPosts","Sidebar","jsxDEV","_jsxDEV","Home","_s","dispatch","posts","state","posts_red","com","comments","currentSubreddit","setCurrentSubreddit","useState","location","useLocation","pathname","subreddit","split","fetchPosts","subredditPosts","type","payload","error","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","_c","$RefreshReg$"],"sources":["/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Home/Home.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts} from '../../api/reddit'; // Import the API function\nimport './Home.css';\nimport { Sidebar }from '../Sidebar/Sidebar';\n\n\nexport const Home = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts_red.posts); // Assuming you have a posts slice in your Redux store\n  const com = useSelector(state => state.posts_red.comments);\n  const [currentSubreddit, setCurrentSubreddit] = useState('FantasyPL');\n  \n  const location = useLocation();\n\n  useEffect(() => {\n    // Extract the subreddit from the URL path\n    const pathname = location.pathname;\n    const subreddit = pathname.split('/')[2]; // Extract the subreddit from the URL path\n    setCurrentSubreddit(subreddit);\n  }, [location]);\n  \n  \n  useEffect(() => {\n    // Fetch subreddit posts when the component mounts\n    const fetchPosts = async (subreddit) => {\n      try {\n        //const subreddit = '/r/FantasyPL'; // Example subreddit (replace with your desired subreddit)\n        const subredditPosts = await getSubredditPosts(subreddit);\n        // Dispatch an action to store the fetched posts in Redux\n        dispatch({ type: 'FETCH_POSTS_SUCCESS', payload: subredditPosts });\n      } catch (error) {\n        console.error('Error fetching subreddit posts:', error);\n        // Dispatch an action to handle the error\n        dispatch({ type: 'FETCH_POSTS_FAILURE', payload: error.message });\n      }\n    };\n\n    fetchPosts(currentSubreddit); // Call the fetchPosts function\n  }, [dispatch]); // Include dispatch in the dependency array to prevent useEffect from running infinitely\n\n\n\n\n  return (\n    <div className=\"home\">\n      <Sidebar></Sidebar>\n      <h1>Reddit Posts</h1>\n      <ul>\n        {posts.map(post => (\n          <li>\n            <Post post={post}/>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,iBAAiB,QAAO,kBAAkB,CAAC,CAAC;AACrD,OAAO,YAAY;AACnB,SAASC,OAAO,QAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG5C,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,KAAK,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,SAAS,CAACF,KAAK,CAAC,CAAC,CAAC;EAC3D,MAAMG,GAAG,GAAGZ,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,SAAS,CAACE,QAAQ,CAAC;EAC1D,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGC,QAAQ,CAAC,WAAW,CAAC;EAErE,MAAMC,QAAQ,GAAGC,WAAW,CAAC,CAAC;EAE9BpB,SAAS,CAAC,MAAM;IACd;IACA,MAAMqB,QAAQ,GAAGF,QAAQ,CAACE,QAAQ;IAClC,MAAMC,SAAS,GAAGD,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1CN,mBAAmB,CAACK,SAAS,CAAC;EAChC,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;EAGdnB,SAAS,CAAC,MAAM;IACd;IACA,MAAMwB,UAAU,GAAG,MAAOF,SAAS,IAAK;MACtC,IAAI;QACF;QACA,MAAMG,cAAc,GAAG,MAAMrB,iBAAiB,CAACkB,SAAS,CAAC;QACzD;QACAZ,QAAQ,CAAC;UAAEgB,IAAI,EAAE,qBAAqB;UAAEC,OAAO,EAAEF;QAAe,CAAC,CAAC;MACpE,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD;QACAlB,QAAQ,CAAC;UAAEgB,IAAI,EAAE,qBAAqB;UAAEC,OAAO,EAAEC,KAAK,CAACE;QAAQ,CAAC,CAAC;MACnE;IACF,CAAC;IAEDN,UAAU,CAACR,gBAAgB,CAAC,CAAC,CAAC;EAChC,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAKhB,oBACEH,OAAA;IAAKwB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBzB,OAAA,CAACF,OAAO;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAU,CAAC,eACnB7B,OAAA;MAAAyB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrB7B,OAAA;MAAAyB,QAAA,EACGrB,KAAK,CAAC0B,GAAG,CAACC,IAAI,iBACb/B,OAAA;QAAAyB,QAAA,eACEzB,OAAA,CAACJ,IAAI;UAACmC,IAAI,EAAEA;QAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAlDWD,IAAI;EAAA,QACEP,WAAW,EACdC,WAAW,EACbA,WAAW;AAAA;AAAAqC,EAAA,GAHZ/B,IAAI;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}