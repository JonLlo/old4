{"ast":null,"code":"var _jsxFileName = \"/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Home/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts } from '../../api/reddit'; // Import the API function\nimport './Home.css';\nimport { Sidebar } from '../Sidebar/Sidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = ({\n  p\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts_red.posts);\n  const fetchPosts = async subreddit => {\n    try {\n      const subredditPosts = await getSubredditPosts(subreddit);\n      dispatch({\n        type: 'FETCH_POSTS_SUCCESS',\n        payload: subredditPosts\n      });\n    } catch (error) {\n      console.error('Error fetching subreddit posts:', error);\n      dispatch({\n        type: 'FETCH_POSTS_FAILURE',\n        payload: error.message\n      });\n    }\n  };\n  useEffect(() => {\n    fetchPosts(p);\n\n    // Return a cleanup function to cancel any ongoing fetch request\n    return () => {\n      // You can cancel the ongoing fetch request here if needed\n    };\n  }, [dispatch, p]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      changeSubreddit: fetchPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reddit Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"ENUDqdKwIx40U6eZCutSSehqnb4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Post","getSubredditPosts","Sidebar","jsxDEV","_jsxDEV","Home","p","_s","dispatch","posts","state","posts_red","fetchPosts","subreddit","subredditPosts","type","payload","error","console","message","className","children","changeSubreddit","fileName","_jsxFileName","lineNumber","columnNumber","map","post","id","_c","$RefreshReg$"],"sources":["/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Home/Home.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts } from '../../api/reddit'; // Import the API function\nimport './Home.css';\nimport { Sidebar } from '../Sidebar/Sidebar';\n\nexport const Home = ({ p }) => {\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts_red.posts);\n\n  \n    const fetchPosts = async (subreddit) => {\n      try {\n        const subredditPosts = await getSubredditPosts(subreddit);\n        dispatch({ type: 'FETCH_POSTS_SUCCESS', payload: subredditPosts });\n      } catch (error) {\n        console.error('Error fetching subreddit posts:', error);\n        dispatch({ type: 'FETCH_POSTS_FAILURE', payload: error.message });\n      }\n    };\n    useEffect(() => {\n    fetchPosts(p);\n\n    // Return a cleanup function to cancel any ongoing fetch request\n    return () => {\n      // You can cancel the ongoing fetch request here if needed\n    };\n  }, [dispatch, p]);\n\n  return (\n    <div className=\"home\">\n      <Sidebar changeSubreddit={fetchPosts} />\n      <h1>Reddit Posts</h1>\n      <ul>\n        {posts.map(post => (\n          <li key={post.id}>\n            <Post post={post} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,iBAAiB,QAAQ,kBAAkB,CAAC,CAAC;AACtD,OAAO,YAAY;AACnB,SAASC,OAAO,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,OAAO,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAE,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,KAAK,GAAGV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,SAAS,CAACF,KAAK,CAAC;EAGvD,MAAMG,UAAU,GAAG,MAAOC,SAAS,IAAK;IACtC,IAAI;MACF,MAAMC,cAAc,GAAG,MAAMb,iBAAiB,CAACY,SAAS,CAAC;MACzDL,QAAQ,CAAC;QAAEO,IAAI,EAAE,qBAAqB;QAAEC,OAAO,EAAEF;MAAe,CAAC,CAAC;IACpE,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvDT,QAAQ,CAAC;QAAEO,IAAI,EAAE,qBAAqB;QAAEC,OAAO,EAAEC,KAAK,CAACE;MAAQ,CAAC,CAAC;IACnE;EACF,CAAC;EACDtB,SAAS,CAAC,MAAM;IAChBe,UAAU,CAACN,CAAC,CAAC;;IAEb;IACA,OAAO,MAAM;MACX;IAAA,CACD;EACH,CAAC,EAAE,CAACE,QAAQ,EAAEF,CAAC,CAAC,CAAC;EAEjB,oBACEF,OAAA;IAAKgB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBjB,OAAA,CAACF,OAAO;MAACoB,eAAe,EAAEV;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxCtB,OAAA;MAAAiB,QAAA,EAAI;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBtB,OAAA;MAAAiB,QAAA,EACGZ,KAAK,CAACkB,GAAG,CAACC,IAAI,iBACbxB,OAAA;QAAAiB,QAAA,eACEjB,OAAA,CAACJ,IAAI;UAAC4B,IAAI,EAAEA;QAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GADbE,IAAI,CAACC,EAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACnB,EAAA,CApCWF,IAAI;EAAA,QACEP,WAAW,EACdC,WAAW;AAAA;AAAA+B,EAAA,GAFdzB,IAAI;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}