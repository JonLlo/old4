{"ast":null,"code":"var _jsxFileName = \"/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Post/Post.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Post.css';\nimport Card from '../../components/Card/Card';\nimport { API_ROOT } from '../../api/reddit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Post = ({\n  post\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const fetchComments = async () => {\n    try {\n      // Make API call to fetch comments for the post\n      // Replace 'YOUR_API_ENDPOINT' with the actual Reddit API endpoint for comments\n      const response = await fetch(`${API_ROOT}${subreddit}.json`);\n      const data = await response.json();\n      setComments(data.comments); // Assuming the response contains an array of comments\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Author: \", post.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: post.data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Number of Comments: \", post.num_comments]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchComments(),\n        children: \"Comments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(Post, \"RHrI29Yaf4wTXaDPqg0VDGN+Yyo=\");\n_c = Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"names":["React","useState","Card","API_ROOT","jsxDEV","_jsxDEV","Post","post","_s","comments","setComments","fetchComments","response","fetch","subreddit","data","json","error","console","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","author","num_comments","onClick","_c","$RefreshReg$"],"sources":["/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Post/Post.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './Post.css';\nimport Card from '../../components/Card/Card';\nimport { API_ROOT } from '../../api/reddit';\n\n\n\nexport const Post = ({ post }) => {\n\n\n\n  const [comments, setComments] = useState([]);\n\n const fetchComments = async () => {\n    try {\n      // Make API call to fetch comments for the post\n      // Replace 'YOUR_API_ENDPOINT' with the actual Reddit API endpoint for comments\n      const response = await fetch(`${API_ROOT}${subreddit}.json`);\n      const data = await response.json();\n      setComments(data.comments); // Assuming the response contains an array of comments\n    } catch (error) {\n      console.error('Error fetching comments:', error);\n    }\n  };\n\n\n  return (\n    <Card className=\"card\">\n      <div>\n        <h2>{post.title}</h2>\n        <p>Author: {post.author}</p>\n        <p>{post.data}</p>\n        <p>Number of Comments: {post.num_comments}</p>\n        <button onClick={fetchComments()}>Comments</button>\n      </div>\n    </Card>\n  );\n};\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,YAAY;AACnB,OAAOC,IAAI,MAAM,4BAA4B;AAC7C,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI5C,OAAO,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAIhC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE7C,MAAMU,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF;MACA;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEV,QAAS,GAAEW,SAAU,OAAM,CAAC;MAC5D,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClCN,WAAW,CAACK,IAAI,CAACN,QAAQ,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAGD,oBACEZ,OAAA,CAACH,IAAI;IAACiB,SAAS,EAAC,MAAM;IAAAC,QAAA,eACpBf,OAAA;MAAAe,QAAA,gBACEf,OAAA;QAAAe,QAAA,EAAKb,IAAI,CAACc;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACrBpB,OAAA;QAAAe,QAAA,GAAG,UAAQ,EAACb,IAAI,CAACmB,MAAM;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BpB,OAAA;QAAAe,QAAA,EAAIb,IAAI,CAACQ;MAAI;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClBpB,OAAA;QAAAe,QAAA,GAAG,sBAAoB,EAACb,IAAI,CAACoB,YAAY;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC9CpB,OAAA;QAAQuB,OAAO,EAAEjB,aAAa,CAAC,CAAE;QAAAS,QAAA,EAAC;MAAQ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEX,CAAC;AAACjB,EAAA,CA9BWF,IAAI;AAAAuB,EAAA,GAAJvB,IAAI;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}