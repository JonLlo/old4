{"ast":null,"code":"var _jsxFileName = \"/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Home/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts } from '../../api/reddit'; // Import the API function\nimport './Home.css';\nimport { rootReducer } from '../../index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts); // Assuming you have a posts slice in your Redux store\n\n  useEffect(() => {\n    // Fetch subreddit posts when the component mounts\n    const fetchPosts = async () => {\n      try {\n        const subreddit = '/r/reactjs'; // Example subreddit (replace with your desired subreddit)\n        const subredditPosts = await getSubredditPosts(subreddit);\n        // Dispatch an action to store the fetched posts in Redux\n        dispatch({\n          type: 'FETCH_POSTS_SUCCESS',\n          payload: subredditPosts\n        });\n      } catch (error) {\n        console.error('Error fetching subreddit posts:', error);\n        // Dispatch an action to handle the error\n        dispatch({\n          type: 'FETCH_POSTS_FAILURE',\n          payload: error.message\n        });\n      }\n    };\n    fetchPosts(); // Call the fetchPosts function\n  }, [dispatch]); // Include dispatch in the dependency array to prevent useEffect from running infinitely\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reddit Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), isArray(posts) ? posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No posts to display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Posts is not an array\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"ENUDqdKwIx40U6eZCutSSehqnb4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Post","getSubredditPosts","rootReducer","jsxDEV","_jsxDEV","Home","_s","dispatch","posts","state","fetchPosts","subreddit","subredditPosts","type","payload","error","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isArray","length","map","post","id","_c","$RefreshReg$"],"sources":["/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Home/Home.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts } from '../../api/reddit'; // Import the API function\nimport './Home.css';\nimport { rootReducer } from '../../index';\n\n\nexport const Home = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts); // Assuming you have a posts slice in your Redux store\n\n  useEffect(() => {\n    // Fetch subreddit posts when the component mounts\n    const fetchPosts = async () => {\n      try {\n        const subreddit = '/r/reactjs'; // Example subreddit (replace with your desired subreddit)\n        const subredditPosts = await getSubredditPosts(subreddit);\n        // Dispatch an action to store the fetched posts in Redux\n        dispatch({ type: 'FETCH_POSTS_SUCCESS', payload: subredditPosts });\n      } catch (error) {\n        console.error('Error fetching subreddit posts:', error);\n        // Dispatch an action to handle the error\n        dispatch({ type: 'FETCH_POSTS_FAILURE', payload: error.message });\n      }\n    };\n\n    fetchPosts(); // Call the fetchPosts function\n  }, [dispatch]); // Include dispatch in the dependency array to prevent useEffect from running infinitely\n\n  return (\n    <div className=\"home\">\n      <h1>Reddit Posts</h1>\n      {isArray(posts) ? (\n        posts.length > 0 ? (\n          posts.map(post => (\n            <Post key={post.id} post={post} />\n          ))\n        ) : (\n          <p>No posts to display</p>\n        )\n      ) : (\n        <p>Posts is not an array</p>\n      )}\n    </div>\n  );\n\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,iBAAiB,QAAQ,kBAAkB,CAAC,CAAC;AACtD,OAAO,YAAY;AACnB,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1C,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,KAAK,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACD,KAAK,CAAC,CAAC,CAAC;;EAEjDX,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,SAAS,GAAG,YAAY,CAAC,CAAC;QAChC,MAAMC,cAAc,GAAG,MAAMX,iBAAiB,CAACU,SAAS,CAAC;QACzD;QACAJ,QAAQ,CAAC;UAAEM,IAAI,EAAE,qBAAqB;UAAEC,OAAO,EAAEF;QAAe,CAAC,CAAC;MACpE,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD;QACAR,QAAQ,CAAC;UAAEM,IAAI,EAAE,qBAAqB;UAAEC,OAAO,EAAEC,KAAK,CAACE;QAAQ,CAAC,CAAC;MACnE;IACF,CAAC;IAEDP,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,oBACEH,OAAA;IAAKc,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBf,OAAA;MAAAe,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBC,OAAO,CAAChB,KAAK,CAAC,GACbA,KAAK,CAACiB,MAAM,GAAG,CAAC,GACdjB,KAAK,CAACkB,GAAG,CAACC,IAAI,iBACZvB,OAAA,CAACJ,IAAI;MAAe2B,IAAI,EAAEA;IAAK,GAApBA,IAAI,CAACC,EAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAClC,CAAC,gBAEFnB,OAAA;MAAAe,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC1B,gBAEDnB,OAAA;MAAAe,QAAA,EAAG;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC5B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAGV,CAAC;AAACjB,EAAA,CAvCWD,IAAI;EAAA,QACEP,WAAW,EACdC,WAAW;AAAA;AAAA8B,EAAA,GAFdxB,IAAI;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}