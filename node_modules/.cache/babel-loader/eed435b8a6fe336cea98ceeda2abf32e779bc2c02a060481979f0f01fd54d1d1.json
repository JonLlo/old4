{"ast":null,"code":"var _jsxFileName = \"/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Home/Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts } from '../../api/reddit'; // Import the API function\nimport './Home.css';\nimport { Sidebar } from '../Sidebar/Sidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = () => {\n  _s();\n  const dispatch = useDispatch();\n  const filteredPosts = useSelector(state => state.posts_red.posts); // Assuming you have a posts slice in your Redux store\n  //const com = useSelector(state => state.posts_red.comments)\n  console.log('ROMEROOOO');\n  useEffect(() => {\n    // Fetch subreddit posts when the component mounts\n    const fetchPosts = async () => {\n      try {\n        const subredditPosts = await getSubredditPosts(subreddit);\n        // Dispatch an action to store the fetched posts in Redux\n        dispatch({\n          type: 'FETCH_POSTS_SUCCESS',\n          payload: subredditPosts\n        });\n      } catch (error) {\n        console.error('Error fetching subreddit posts:', error);\n        // Dispatch an action to handle the error\n        dispatch({\n          type: 'FETCH_POSTS_FAILURE',\n          payload: error.message\n        });\n      }\n    };\n    fetchPosts(); // Call the fetchdPosts function\n  }, [dispatch, subreddit]); // Include dispatch in the dependency array to prevent useEffect from running infinitely\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reddit Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredPosts.map(post =>\n      /*#__PURE__*/\n      // Change from `posts` to `filteredPosts`\n      _jsxDEV(\"li\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"uI15ltSp1gz9f7RgDltaxuuqwjU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Post","getSubredditPosts","Sidebar","jsxDEV","_jsxDEV","Home","_s","dispatch","filteredPosts","state","posts_red","posts","console","log","fetchPosts","subredditPosts","subreddit","type","payload","error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","id","_c","$RefreshReg$"],"sources":["/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Home/Home.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts} from '../../api/reddit'; // Import the API function\nimport './Home.css';\nimport { Sidebar }from '../Sidebar/Sidebar';\n\n\nexport const Home = () => {\n  const dispatch = useDispatch();\n  const filteredPosts = useSelector(state => state.posts_red.posts); // Assuming you have a posts slice in your Redux store\n  //const com = useSelector(state => state.posts_red.comments)\n  console.log('ROMEROOOO')\n\n  useEffect(() => {\n    // Fetch subreddit posts when the component mounts\n    const fetchPosts = async () => {\n      try {\n        const subredditPosts = await getSubredditPosts(subreddit);\n        // Dispatch an action to store the fetched posts in Redux\n        dispatch({ type: 'FETCH_POSTS_SUCCESS', payload: subredditPosts });\n      } catch (error) {\n        console.error('Error fetching subreddit posts:', error);\n        // Dispatch an action to handle the error\n        dispatch({ type: 'FETCH_POSTS_FAILURE', payload: error.message });\n      }\n    };\n\n    fetchPosts(); // Call the fetchdPosts function\n  }, [dispatch, subreddit]); // Include dispatch in the dependency array to prevent useEffect from running infinitely\n\n\n\n\n  return (\n    <div className=\"home\">\n      <h1>Reddit Posts</h1>\n      <ul>\n        {filteredPosts.map(post => ( // Change from `posts` to `filteredPosts`\n          <li key={post.id}> {/* Add key prop */}\n            <Post post={post}/>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n  }"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,iBAAiB,QAAO,kBAAkB,CAAC,CAAC;AACrD,OAAO,YAAY;AACnB,SAASC,OAAO,QAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG5C,OAAO,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,aAAa,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,SAAS,CAACC,KAAK,CAAC,CAAC,CAAC;EACnE;EACAC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EAExBhB,SAAS,CAAC,MAAM;IACd;IACA,MAAMiB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,cAAc,GAAG,MAAMd,iBAAiB,CAACe,SAAS,CAAC;QACzD;QACAT,QAAQ,CAAC;UAAEU,IAAI,EAAE,qBAAqB;UAAEC,OAAO,EAAEH;QAAe,CAAC,CAAC;MACpE,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD;QACAZ,QAAQ,CAAC;UAAEU,IAAI,EAAE,qBAAqB;UAAEC,OAAO,EAAEC,KAAK,CAACC;QAAQ,CAAC,CAAC;MACnE;IACF,CAAC;IAEDN,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,CAACP,QAAQ,EAAES,SAAS,CAAC,CAAC,CAAC,CAAC;;EAK3B,oBACEZ,OAAA;IAAKiB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBlB,OAAA;MAAAkB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBtB,OAAA;MAAAkB,QAAA,EACGd,aAAa,CAACmB,GAAG,CAACC,IAAI;MAAA;MAAM;MAC3BxB,OAAA;QAAAkB,QAAA,GAAkB,GAAC,eACjBlB,OAAA,CAACJ,IAAI;UAAC4B,IAAI,EAAEA;QAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA,GADZE,IAAI,CAACC,EAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAER,CAAC;AAAApB,EAAA,CAtCUD,IAAI;EAAA,QACEP,WAAW,EACNC,WAAW;AAAA;AAAA+B,EAAA,GAFtBzB,IAAI;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}