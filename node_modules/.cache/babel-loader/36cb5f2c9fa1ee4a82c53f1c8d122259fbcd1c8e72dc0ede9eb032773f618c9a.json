{"ast":null,"code":"var _jsxFileName = \"/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/components/Card/Card.js\";\nimport React from 'react';\nimport './Card.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Card = ({\n  children\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `card`,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n_c = Card;\nexport default Card;\nconst [comments, setComments] = useState([]);\nconst fetchComments = async () => {\n  try {\n    // Make API call to fetch comments for the post\n    // Replace 'YOUR_API_ENDPOINT' with the actual Reddit API endpoint for comments\n    const response = await fetch(`YOUR_API_ENDPOINT${post.id}/comments`);\n    const data = await response.json();\n    setComments(data.comments); // Assuming the response contains an array of comments\n  } catch (error) {\n    console.error('Error fetching comments:', error);\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Card","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","comments","setComments","useState","fetchComments","response","fetch","post","id","data","json","error","console","$RefreshReg$"],"sources":["/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/components/Card/Card.js"],"sourcesContent":["import React from 'react';\nimport './Card.css';\n\nexport const Card = ({ children }) => {\n  return (\n    <div className={`card`}>\n      {children}\n    </div>\n  );\n};\n\nexport default Card;\n\n\nconst [comments, setComments] = useState([]);\n\nconst fetchComments = async () => {\n  try {\n    // Make API call to fetch comments for the post\n    // Replace 'YOUR_API_ENDPOINT' with the actual Reddit API endpoint for comments\n    const response = await fetch(`YOUR_API_ENDPOINT${post.id}/comments`);\n    const data = await response.json();\n    setComments(data.comments); // Assuming the response contains an array of comments\n  } catch (error) {\n    console.error('Error fetching comments:', error);\n  }\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,OAAO,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EACpC,oBACEF,OAAA;IAAKG,SAAS,EAAG,MAAM;IAAAD,QAAA,EACpBA;EAAQ;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACC,EAAA,GANWP,IAAI;AAQjB,eAAeA,IAAI;AAGnB,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;AAE5C,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACF;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,oBAAmBC,IAAI,CAACC,EAAG,WAAU,CAAC;IACpE,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClCR,WAAW,CAACO,IAAI,CAACR,QAAQ,CAAC,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EAClD;AACF,CAAC;AAAC,IAAAX,EAAA;AAAAa,YAAA,CAAAb,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}