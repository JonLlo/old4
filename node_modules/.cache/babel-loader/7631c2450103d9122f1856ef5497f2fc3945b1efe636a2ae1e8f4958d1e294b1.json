{"ast":null,"code":"var _jsxFileName = \"/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/index.js\";\n// index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { Card } from './components/Card/Card';\nimport { Home } from './features/Home/Home';\nimport { createStore, combineReducers } from 'redux';\nimport { postsReducer } from './reducers/postsReducer'; // Import your postsReducer\nimport { counterReducer } from './reducers/counterReducer';\n\n// Redux store\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  // This key 'posts' will be used to access the posts slice of state\n  // Add other reducers here if needed\n  counter: counterReducer\n});\nconst store = createStore(rootReducer);\n\n// Action creators\nexport const increment = () => ({\n  type: \"increment\",\n  payload: 1\n});\nexport const divide = () => ({\n  type: \"divide\",\n  payload: 2\n});\nexport const decrement = () => ({\n  type: \"decrement\",\n  payload: 1\n});\nexport const multiply = () => ({\n  type: \"multiply\",\n  payload: 2\n});\nexport const squared = () => ({\n  type: \"squared\",\n  payload: 2\n});\nexport const reset = () => ({\n  type: \"reset\"\n});\n\n// Render the app\nReactDOM.render( /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: [/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 53,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\n// Log initial state and subscribe to store changes\nconsole.log(store.getState());\nstore.subscribe(() => console.log(\"Store is changed and state is\", store.getState()));","map":{"version":3,"names":["React","ReactDOM","App","Provider","Card","Home","createStore","combineReducers","postsReducer","counterReducer","jsxDEV","_jsxDEV","rootReducer","posts","counter","store","increment","type","payload","divide","decrement","multiply","squared","reset","render","children","StrictMode","fileName","_jsxFileName","lineNumber","columnNumber","document","getElementById","console","log","getState","subscribe"],"sources":["/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/index.js"],"sourcesContent":["// index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { Card } from './components/Card/Card';\nimport { Home } from './features/Home/Home';\nimport { createStore, combineReducers } from 'redux';\nimport { postsReducer } from './reducers/postsReducer'; // Import your postsReducer\nimport { counterReducer } from './reducers/counterReducer'\n\n\n// Redux store\nconst rootReducer = combineReducers({\n  posts: postsReducer, // This key 'posts' will be used to access the posts slice of state\n  // Add other reducers here if needed\n  counter: counterReducer\n});\n\nconst store = createStore(rootReducer);\n\n// Action creators\nexport const increment = () => ({\n  type: \"increment\",\n  payload: 1\n});\nexport const divide = () => ({\n  type: \"divide\",\n  payload: 2\n});\n\nexport const decrement = () => ({\n  type: \"decrement\",\n  payload: 1\n});\n\nexport const multiply = () => ({\n  type: \"multiply\",\n  payload: 2\n});\n\nexport const squared = () => ({\n  type: \"squared\",\n  payload: 2\n});\nexport const reset = () => ({\n  type: \"reset\",\n});\n\n// Render the app\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n      <Home />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// Log initial state and subscribe to store changes\nconsole.log(store.getState());\nstore.subscribe(() => console.log(\"Store is changed and state is\", store.getState()));\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,IAAI,QAAQ,wBAAwB;AAC7C,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,WAAW,EAAEC,eAAe,QAAQ,OAAO;AACpD,SAASC,YAAY,QAAQ,yBAAyB,CAAC,CAAC;AACxD,SAASC,cAAc,QAAQ,2BAA2B;;AAG1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAGL,eAAe,CAAC;EAClCM,KAAK,EAAEL,YAAY;EAAE;EACrB;EACAM,OAAO,EAAEL;AACX,CAAC,CAAC;AAEF,MAAMM,KAAK,GAAGT,WAAW,CAACM,WAAW,CAAC;;AAEtC;AACA,OAAO,MAAMI,SAAS,GAAGA,CAAA,MAAO;EAC9BC,IAAI,EAAE,WAAW;EACjBC,OAAO,EAAE;AACX,CAAC,CAAC;AACF,OAAO,MAAMC,MAAM,GAAGA,CAAA,MAAO;EAC3BF,IAAI,EAAE,QAAQ;EACdC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAME,SAAS,GAAGA,CAAA,MAAO;EAC9BH,IAAI,EAAE,WAAW;EACjBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMG,QAAQ,GAAGA,CAAA,MAAO;EAC7BJ,IAAI,EAAE,UAAU;EAChBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMI,OAAO,GAAGA,CAAA,MAAO;EAC5BL,IAAI,EAAE,SAAS;EACfC,OAAO,EAAE;AACX,CAAC,CAAC;AACF,OAAO,MAAMK,KAAK,GAAGA,CAAA,MAAO;EAC1BN,IAAI,EAAE;AACR,CAAC,CAAC;;AAEF;AACAhB,QAAQ,CAACuB,MAAM,eACbb,OAAA,CAACR,QAAQ;EAACY,KAAK,EAAEA,KAAM;EAAAU,QAAA,eACrBd,OAAA,CAACX,KAAK,CAAC0B,UAAU;IAAAD,QAAA,gBACfd,OAAA,CAACT,GAAG;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACPnB,OAAA,CAACN,IAAI;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACX,CAAC,EACXC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAChC,CAAC;;AAED;AACAC,OAAO,CAACC,GAAG,CAACnB,KAAK,CAACoB,QAAQ,CAAC,CAAC,CAAC;AAC7BpB,KAAK,CAACqB,SAAS,CAAC,MAAMH,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEnB,KAAK,CAACoB,QAAQ,CAAC,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}