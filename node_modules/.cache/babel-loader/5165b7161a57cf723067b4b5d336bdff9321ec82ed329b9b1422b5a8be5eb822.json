{"ast":null,"code":"var _jsxFileName = \"/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Home/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts } from '../../api/reddit'; // Import the API function\nimport './Home.css';\nimport { Sidebar } from '../Sidebar/Sidebar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Home = props => {\n  _s();\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts_red.posts); // Assuming you have a posts slice in your Redux store\n  const com = useSelector(state => state.posts_red.comments);\n  const subreddit = useSelector(state => state.subreddit_red.subreddit);\n  useEffect(() => {\n    // Fetch subreddit posts when the component mounts\n    const fetchPosts = async () => {\n      try {\n        const subredditPosts = await getSubredditPosts(subreddit);\n        // Dispatch an action to store the fetched posts in Redux\n        dispatch({\n          type: 'FETCH_POSTS_SUCCESS',\n          payload: subredditPosts\n        });\n      } catch (error) {\n        console.error('Error fetching subreddit posts:', error);\n        // Dispatch an action to handle the error\n        dispatch({\n          type: 'FETCH_POSTS_FAILURE',\n          payload: error.message\n        });\n      }\n    };\n    fetchPosts(); // Call the fetchPosts function\n  }, [dispatch, props]); // Include dispatch in the dependency array to prevent useEffect from running infinitely\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reddit Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Post, {\n          post: post\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this)\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"cLyuuF4if3XChr/OWRVI9YDtoZQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","Post","getSubredditPosts","Sidebar","jsxDEV","_jsxDEV","Home","props","_s","dispatch","posts","state","posts_red","com","comments","subreddit","subreddit_red","fetchPosts","subredditPosts","type","payload","error","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","id","_c","$RefreshReg$"],"sources":["/Users/Codingcourse/Projects/PORTFOLIO_PROJECTS/portfolio_project_reddit/src/features/Home/Home.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Post } from '../Post/Post';\nimport { getSubredditPosts} from '../../api/reddit'; // Import the API function\nimport './Home.css';\nimport { Sidebar }from '../Sidebar/Sidebar';\n\n\nexport const Home = (props) => {\n  const dispatch = useDispatch();\n  const posts = useSelector(state => state.posts_red.posts); // Assuming you have a posts slice in your Redux store\n  const com = useSelector(state => state.posts_red.comments)\n  const subreddit = useSelector(state => state.subreddit_red.subreddit)\n  \n  useEffect(() => {\n    // Fetch subreddit posts when the component mounts\n    const fetchPosts = async () => {\n      try {\n     \n        const subredditPosts = await getSubredditPosts(subreddit);\n        // Dispatch an action to store the fetched posts in Redux\n        dispatch({ type: 'FETCH_POSTS_SUCCESS', payload: subredditPosts });\n      } catch (error) {\n        console.error('Error fetching subreddit posts:', error);\n        // Dispatch an action to handle the error\n        dispatch({ type: 'FETCH_POSTS_FAILURE', payload: error.message });\n      }\n    };\n\n    fetchPosts(); // Call the fetchPosts function\n  }, [dispatch, props]); // Include dispatch in the dependency array to prevent useEffect from running infinitely\n\n\n\n\n  return (\n    <div className=\"home\">\n      <Sidebar/>\n      <h1>Reddit Posts</h1>\n      <ul>\n        {posts.map(post => (\n          <li key ={post.id}>\n            <Post post={post}/>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,iBAAiB,QAAO,kBAAkB,CAAC,CAAC;AACrD,OAAO,YAAY;AACnB,SAASC,OAAO,QAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG5C,OAAO,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAC9B,MAAMW,KAAK,GAAGV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,SAAS,CAACF,KAAK,CAAC,CAAC,CAAC;EAC3D,MAAMG,GAAG,GAAGb,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,SAAS,CAACE,QAAQ,CAAC;EAC1D,MAAMC,SAAS,GAAGf,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACK,aAAa,CAACD,SAAS,CAAC;EAErEjB,SAAS,CAAC,MAAM;IACd;IACA,MAAMmB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QAEF,MAAMC,cAAc,GAAG,MAAMhB,iBAAiB,CAACa,SAAS,CAAC;QACzD;QACAN,QAAQ,CAAC;UAAEU,IAAI,EAAE,qBAAqB;UAAEC,OAAO,EAAEF;QAAe,CAAC,CAAC;MACpE,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD;QACAZ,QAAQ,CAAC;UAAEU,IAAI,EAAE,qBAAqB;UAAEC,OAAO,EAAEC,KAAK,CAACE;QAAQ,CAAC,CAAC;MACnE;IACF,CAAC;IAEDN,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,CAACR,QAAQ,EAAEF,KAAK,CAAC,CAAC,CAAC,CAAC;;EAKvB,oBACEF,OAAA;IAAKmB,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACnBpB,OAAA,CAACF,OAAO;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACVxB,OAAA;MAAAoB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBxB,OAAA;MAAAoB,QAAA,EACGf,KAAK,CAACoB,GAAG,CAACC,IAAI,iBACb1B,OAAA;QAAAoB,QAAA,eACEpB,OAAA,CAACJ,IAAI;UAAC8B,IAAI,EAAEA;QAAK;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC,GADXE,IAAI,CAACC,EAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACrB,EAAA,CAxCWF,IAAI;EAAA,QACEP,WAAW,EACdC,WAAW,EACbA,WAAW,EACLA,WAAW;AAAA;AAAAiC,EAAA,GAJlB3B,IAAI;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}